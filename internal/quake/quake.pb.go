// Code generated by protoc-gen-go.
// source: quake.proto
// DO NOT EDIT!

/*
Package quake is a generated protocol buffer package.

It is generated from these files:
	quake.proto

It has these top-level messages:
	Quake
	Phase
	Magnitude
	StationMagnitude
	Timestamp
*/
package quake

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Quake is for earthquake information.
type Quake struct {
	// All the Phase used to locate the quake.
	Phases []*Phase `protobuf:"bytes,1,rep,name=phases" json:"phases,omitempty"`
	// Magnitude all the magnitudes associated with the quake.
	Magnitudes            []*Magnitude `protobuf:"bytes,2,rep,name=magnitudes" json:"magnitudes,omitempty"`
	PublicID              string       `protobuf:"bytes,10,opt,name=public_iD,json=publicID" json:"public_iD,omitempty"`
	Type                  string       `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
	Time                  *Timestamp   `protobuf:"bytes,12,opt,name=time" json:"time,omitempty"`
	Latitude              float64      `protobuf:"fixed64,13,opt,name=latitude" json:"latitude,omitempty"`
	LatitudeUncertainty   float64      `protobuf:"fixed64,14,opt,name=latitude_uncertainty,json=latitudeUncertainty" json:"latitude_uncertainty,omitempty"`
	Longitude             float64      `protobuf:"fixed64,15,opt,name=longitude" json:"longitude,omitempty"`
	LongitudeUncertainty  float64      `protobuf:"fixed64,16,opt,name=longitude_uncertainty,json=longitudeUncertainty" json:"longitude_uncertainty,omitempty"`
	Depth                 float64      `protobuf:"fixed64,17,opt,name=depth" json:"depth,omitempty"`
	DepthUncertainty      float64      `protobuf:"fixed64,18,opt,name=depth_uncertainty,json=depthUncertainty" json:"depth_uncertainty,omitempty"`
	DepthType             string       `protobuf:"bytes,19,opt,name=depth_type,json=depthType" json:"depth_type,omitempty"`
	Magnitude             float64      `protobuf:"fixed64,20,opt,name=magnitude" json:"magnitude,omitempty"`
	MagnitudeUncertainty  float64      `protobuf:"fixed64,21,opt,name=magnitude_uncertainty,json=magnitudeUncertainty" json:"magnitude_uncertainty,omitempty"`
	MagnitudeType         string       `protobuf:"bytes,22,opt,name=magnitude_type,json=magnitudeType" json:"magnitude_type,omitempty"`
	MagnitudeStationCount int64        `protobuf:"varint,23,opt,name=magnitude_station_count,json=magnitudeStationCount" json:"magnitude_station_count,omitempty"`
	Method                string       `protobuf:"bytes,24,opt,name=method" json:"method,omitempty"`
	EarthModel            string       `protobuf:"bytes,25,opt,name=earth_model,json=earthModel" json:"earth_model,omitempty"`
	EvaluationMode        string       `protobuf:"bytes,26,opt,name=evaluation_mode,json=evaluationMode" json:"evaluation_mode,omitempty"`
	EvaluationStatus      string       `protobuf:"bytes,27,opt,name=evaluation_status,json=evaluationStatus" json:"evaluation_status,omitempty"`
	UsedPhaseCount        int64        `protobuf:"varint,28,opt,name=used_phase_count,json=usedPhaseCount" json:"used_phase_count,omitempty"`
	UsedStationCount      int64        `protobuf:"varint,29,opt,name=used_station_count,json=usedStationCount" json:"used_station_count,omitempty"`
	StandardError         float64      `protobuf:"fixed64,30,opt,name=standard_error,json=standardError" json:"standard_error,omitempty"`
	AzimuthalGap          float64      `protobuf:"fixed64,31,opt,name=azimuthal_gap,json=azimuthalGap" json:"azimuthal_gap,omitempty"`
	MinimumDistance       float64      `protobuf:"fixed64,32,opt,name=minimum_distance,json=minimumDistance" json:"minimum_distance,omitempty"`
	Agency                string       `protobuf:"bytes,33,opt,name=agency" json:"agency,omitempty"`
	ModificationTime      *Timestamp   `protobuf:"bytes,34,opt,name=modification_time,json=modificationTime" json:"modification_time,omitempty"`
}

func (m *Quake) Reset()                    { *m = Quake{} }
func (m *Quake) String() string            { return proto.CompactTextString(m) }
func (*Quake) ProtoMessage()               {}
func (*Quake) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Quake) GetPhases() []*Phase {
	if m != nil {
		return m.Phases
	}
	return nil
}

func (m *Quake) GetMagnitudes() []*Magnitude {
	if m != nil {
		return m.Magnitudes
	}
	return nil
}

func (m *Quake) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Quake) GetModificationTime() *Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return nil
}

// Phase represents a seismic phase.
type Phase struct {
	NetworkCode      string     `protobuf:"bytes,1,opt,name=network_code,json=networkCode" json:"network_code,omitempty"`
	StationCode      string     `protobuf:"bytes,2,opt,name=station_code,json=stationCode" json:"station_code,omitempty"`
	LocationCode     string     `protobuf:"bytes,3,opt,name=location_code,json=locationCode" json:"location_code,omitempty"`
	ChannelCode      string     `protobuf:"bytes,4,opt,name=channel_code,json=channelCode" json:"channel_code,omitempty"`
	Phase            string     `protobuf:"bytes,5,opt,name=phase" json:"phase,omitempty"`
	Time             *Timestamp `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	Residual         float64    `protobuf:"fixed64,7,opt,name=residual" json:"residual,omitempty"`
	Weight           float64    `protobuf:"fixed64,8,opt,name=weight" json:"weight,omitempty"`
	Azimuth          float64    `protobuf:"fixed64,9,opt,name=azimuth" json:"azimuth,omitempty"`
	Distance         float64    `protobuf:"fixed64,10,opt,name=distance" json:"distance,omitempty"`
	EvaluationMode   string     `protobuf:"bytes,11,opt,name=evaluation_mode,json=evaluationMode" json:"evaluation_mode,omitempty"`
	EvaluationStatus string     `protobuf:"bytes,12,opt,name=evaluation_status,json=evaluationStatus" json:"evaluation_status,omitempty"`
}

func (m *Phase) Reset()                    { *m = Phase{} }
func (m *Phase) String() string            { return proto.CompactTextString(m) }
func (*Phase) ProtoMessage()               {}
func (*Phase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Phase) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

// Magnitude represents a quake magnitude.
type Magnitude struct {
	// StationMagnitude that have contributed to the Magnitude.
	StationMagnitude     []*StationMagnitude `protobuf:"bytes,1,rep,name=station_magnitude,json=stationMagnitude" json:"station_magnitude,omitempty"`
	Magnitude            float64             `protobuf:"fixed64,2,opt,name=magnitude" json:"magnitude,omitempty"`
	MagnitudeUncertainty float64             `protobuf:"fixed64,3,opt,name=magnitude_uncertainty,json=magnitudeUncertainty" json:"magnitude_uncertainty,omitempty"`
	Type                 string              `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Method               string              `protobuf:"bytes,5,opt,name=method" json:"method,omitempty"`
	StationCount         int64               `protobuf:"varint,6,opt,name=station_count,json=stationCount" json:"station_count,omitempty"`
}

func (m *Magnitude) Reset()                    { *m = Magnitude{} }
func (m *Magnitude) String() string            { return proto.CompactTextString(m) }
func (*Magnitude) ProtoMessage()               {}
func (*Magnitude) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Magnitude) GetStationMagnitude() []*StationMagnitude {
	if m != nil {
		return m.StationMagnitude
	}
	return nil
}

// StationMagnitude the magnitude calculated at a single station.
type StationMagnitude struct {
	NetworkCode  string  `protobuf:"bytes,1,opt,name=network_code,json=networkCode" json:"network_code,omitempty"`
	StationCode  string  `protobuf:"bytes,2,opt,name=station_code,json=stationCode" json:"station_code,omitempty"`
	LocationCode string  `protobuf:"bytes,3,opt,name=location_code,json=locationCode" json:"location_code,omitempty"`
	ChannelCode  string  `protobuf:"bytes,4,opt,name=channel_code,json=channelCode" json:"channel_code,omitempty"`
	Magnitude    float64 `protobuf:"fixed64,5,opt,name=magnitude" json:"magnitude,omitempty"`
	Type         string  `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	Residual     float64 `protobuf:"fixed64,7,opt,name=residual" json:"residual,omitempty"`
	Weight       float64 `protobuf:"fixed64,8,opt,name=weight" json:"weight,omitempty"`
	Amplitude    float64 `protobuf:"fixed64,9,opt,name=amplitude" json:"amplitude,omitempty"`
}

func (m *StationMagnitude) Reset()                    { *m = StationMagnitude{} }
func (m *StationMagnitude) String() string            { return proto.CompactTextString(m) }
func (*StationMagnitude) ProtoMessage()               {}
func (*StationMagnitude) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Timestamp for encoding time stamps.
type Timestamp struct {
	// Unix time in seconds
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Frational part of time in nanoseconds.
	Nanos int64 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Quake)(nil), "quake.Quake")
	proto.RegisterType((*Phase)(nil), "quake.Phase")
	proto.RegisterType((*Magnitude)(nil), "quake.Magnitude")
	proto.RegisterType((*StationMagnitude)(nil), "quake.StationMagnitude")
	proto.RegisterType((*Timestamp)(nil), "quake.Timestamp")
}

var fileDescriptor0 = []byte{
	// 810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x86, 0x9e, 0x96, 0x46, 0x0f, 0x53, 0x6b, 0xd9, 0xde, 0xfa, 0x51, 0xdb, 0x6a, 0x8b, 0xba,
	0x68, 0x61, 0xb4, 0x35, 0xd0, 0x4b, 0x91, 0x4b, 0xac, 0x20, 0xc8, 0xc1, 0x40, 0x42, 0x3b, 0x97,
	0x5c, 0x84, 0x35, 0xb9, 0x91, 0x08, 0x93, 0x4b, 0x86, 0x5c, 0xc6, 0x70, 0xfe, 0x45, 0x7e, 0x42,
	0x80, 0xfc, 0xc5, 0xdc, 0xb3, 0x3b, 0xcb, 0xa7, 0xe1, 0x24, 0x46, 0x4e, 0xb9, 0x71, 0xbe, 0xef,
	0xd3, 0xcc, 0xec, 0xb7, 0xb3, 0x03, 0xc1, 0xe0, 0x4d, 0xca, 0xae, 0xf9, 0x49, 0x14, 0x87, 0x32,
	0x24, 0x1d, 0x0c, 0x66, 0x1f, 0x7a, 0xd0, 0x79, 0xa1, 0xbf, 0xc8, 0xaf, 0xd0, 0x8d, 0x56, 0x2c,
	0xe1, 0x09, 0x6d, 0x1c, 0xb6, 0x8e, 0x07, 0xff, 0x0e, 0x4f, 0x8c, 0xfc, 0xb9, 0x06, 0xed, 0x8c,
	0x23, 0x7f, 0x03, 0x04, 0x6c, 0x29, 0x3c, 0x99, 0xba, 0x4a, 0xd9, 0x44, 0xa5, 0x95, 0x29, 0xcf,
	0x73, 0xc2, 0xae, 0x68, 0xc8, 0x2e, 0xf4, 0xa3, 0xf4, 0xca, 0xf7, 0x9c, 0x85, 0x37, 0xa7, 0x70,
	0xd8, 0x38, 0xee, 0xdb, 0x3d, 0x03, 0x3c, 0x9b, 0x13, 0x02, 0x6d, 0x79, 0x1b, 0x71, 0x3a, 0x40,
	0x1c, 0xbf, 0x55, 0x23, 0x6d, 0xe9, 0x05, 0x9c, 0x0e, 0x15, 0x56, 0x26, 0xbf, 0x54, 0x50, 0x22,
	0x59, 0x10, 0xd9, 0xc8, 0x92, 0x1d, 0xe8, 0xf9, 0x4c, 0x62, 0x0d, 0x3a, 0x52, 0xca, 0x86, 0x5d,
	0xc4, 0xe4, 0x1f, 0x98, 0xe6, 0xdf, 0x8b, 0x54, 0x38, 0x3c, 0x96, 0xcc, 0x13, 0xf2, 0x96, 0x8e,
	0x51, 0xb7, 0x91, 0x73, 0x2f, 0x4b, 0x8a, 0xec, 0x41, 0xdf, 0x0f, 0xc5, 0xd2, 0xe4, 0x5b, 0x47,
	0x5d, 0x09, 0x90, 0x53, 0xd8, 0x2c, 0x82, 0x5a, 0x46, 0x0b, 0x95, 0xd3, 0x82, 0xac, 0xa6, 0x9c,
	0x42, 0xc7, 0xe5, 0x91, 0x5c, 0xd1, 0x09, 0x8a, 0x4c, 0x40, 0xfe, 0x84, 0x09, 0x7e, 0xd4, 0xd2,
	0x10, 0x54, 0x58, 0x48, 0x54, 0x53, 0xec, 0x03, 0x18, 0x31, 0x9a, 0xb4, 0x81, 0x26, 0xf5, 0x11,
	0xb9, 0xd4, 0x4e, 0xa9, 0xa6, 0x0b, 0xa3, 0xe9, 0xd4, 0x34, 0x5d, 0x00, 0xba, 0xe9, 0x22, 0xa8,
	0x55, 0xdb, 0x34, 0x4d, 0x17, 0x64, 0xb5, 0xe2, 0x6f, 0x30, 0x2e, 0x7f, 0x84, 0x55, 0xb7, 0xb0,
	0xea, 0xa8, 0x40, 0xb1, 0xf2, 0x7f, 0xb0, 0x5d, 0xca, 0xd4, 0xb5, 0x48, 0x2f, 0x14, 0x0b, 0x27,
	0x4c, 0x85, 0xa4, 0xdb, 0x4a, 0xdf, 0xb2, 0xcb, 0xd2, 0x17, 0x86, 0x3d, 0xd3, 0x24, 0xd9, 0x82,
	0x6e, 0xc0, 0xe5, 0x2a, 0x74, 0x29, 0xc5, 0xb4, 0x59, 0x44, 0x0e, 0x60, 0xc0, 0x59, 0xac, 0x0e,
	0x1a, 0x84, 0x2e, 0xf7, 0xe9, 0x4f, 0x48, 0x02, 0x42, 0xe7, 0x1a, 0x21, 0xbf, 0xc3, 0x3a, 0x7f,
	0xcb, 0xfc, 0xd4, 0x54, 0xd2, 0x2a, 0xba, 0x83, 0xa2, 0x71, 0x09, 0x6b, 0xa5, 0xf6, 0xb7, 0x22,
	0xd4, 0xad, 0xa5, 0x09, 0xdd, 0x45, 0xa9, 0x55, 0x12, 0x17, 0x88, 0x93, 0x63, 0xb0, 0xd2, 0x84,
	0xbb, 0x0b, 0x1c, 0xee, 0xac, 0xff, 0x3d, 0xec, 0x7f, 0xac, 0x71, 0x1c, 0x7d, 0xd3, 0xf8, 0x5f,
	0x40, 0x50, 0x59, 0x3f, 0xeb, 0x3e, 0x6a, 0x31, 0x47, 0xed, 0x98, 0xca, 0x45, 0x25, 0x14, 0x2e,
	0x8b, 0xdd, 0x05, 0x8f, 0xe3, 0x30, 0xa6, 0x3f, 0xa3, 0xe7, 0xa3, 0x1c, 0x7d, 0xa2, 0x41, 0xf2,
	0x0b, 0x8c, 0xd8, 0x3b, 0x2f, 0x48, 0xe5, 0x8a, 0xf9, 0x8b, 0x25, 0x8b, 0xe8, 0x01, 0xaa, 0x86,
	0x05, 0xf8, 0x94, 0x45, 0xe4, 0x0f, 0xb0, 0x02, 0x4f, 0x28, 0x20, 0x58, 0xb8, 0x9e, 0xfe, 0xbd,
	0xc3, 0xe9, 0x21, 0xea, 0xd6, 0x33, 0x7c, 0x9e, 0xc1, 0xda, 0x5d, 0xb6, 0xe4, 0xc2, 0xb9, 0xa5,
	0x47, 0xc6, 0x5d, 0x13, 0x91, 0x47, 0x30, 0x51, 0x8e, 0x79, 0xaf, 0x3d, 0xc7, 0x34, 0x8f, 0xcf,
	0x6b, 0xf6, 0x85, 0xe7, 0x65, 0x55, 0xa5, 0x1a, 0x9e, 0xbd, 0x6f, 0x41, 0x07, 0xad, 0x20, 0x47,
	0x30, 0x14, 0x5c, 0xde, 0x84, 0xf1, 0xb5, 0x32, 0x40, 0x5d, 0x41, 0x03, 0xcb, 0x0c, 0x32, 0xec,
	0x4c, 0xfb, 0xaf, 0x24, 0xa5, 0x47, 0x4a, 0xd2, 0x34, 0x92, 0x24, 0xb7, 0x47, 0x49, 0xd4, 0xb1,
	0xfd, 0xd0, 0xa9, 0x68, 0x5a, 0xa8, 0x19, 0xe6, 0x60, 0x9e, 0xc7, 0x59, 0x31, 0x21, 0xb8, 0x6f,
	0x34, 0x6d, 0x93, 0x27, 0xc3, 0x50, 0xa2, 0x1e, 0x18, 0x5e, 0x1c, 0xed, 0x20, 0x67, 0x82, 0x62,
	0x7d, 0x74, 0xbf, 0xb5, 0x3e, 0x62, 0x9e, 0x78, 0x6e, 0xca, 0x7c, 0xba, 0x66, 0xd6, 0x47, 0x1e,
	0x6b, 0x1b, 0x6f, 0xb8, 0xb7, 0x5c, 0x49, 0xda, 0x43, 0x26, 0x8b, 0x08, 0x85, 0xb5, 0xec, 0x66,
	0x68, 0x1f, 0x89, 0x3c, 0xd4, 0xd9, 0x8a, 0xbb, 0x01, 0x93, 0x2d, 0x8f, 0xef, 0x9b, 0xdc, 0xc1,
	0xc3, 0x27, 0x77, 0x78, 0xff, 0xe4, 0xce, 0x3e, 0x35, 0xa0, 0x5f, 0xec, 0x5b, 0x32, 0x87, 0x49,
	0x6e, 0x7a, 0xb9, 0x10, 0xcc, 0x1a, 0xdf, 0xce, 0x0c, 0xc8, 0xe6, 0xb3, 0xdc, 0xd1, 0x56, 0x72,
	0x07, 0xa9, 0xaf, 0x93, 0xe6, 0x83, 0xd7, 0x49, 0xeb, 0x2b, 0xeb, 0x24, 0xdf, 0xef, 0xed, 0xca,
	0x7e, 0x2f, 0x77, 0x40, 0xa7, 0xb6, 0x03, 0xd4, 0x58, 0xd4, 0x5f, 0x57, 0x17, 0x5f, 0xd7, 0x30,
	0xa9, 0xbc, 0xac, 0xd9, 0xc7, 0x26, 0x58, 0x77, 0x8f, 0xf2, 0x83, 0x8d, 0x65, 0xcd, 0xc6, 0xce,
	0x5d, 0x1b, 0x73, 0x47, 0xba, 0x15, 0x47, 0xbe, 0x67, 0x18, 0x55, 0x15, 0x35, 0xcd, 0xbe, 0xa9,
	0x62, 0xc6, 0xb1, 0x04, 0x66, 0xff, 0x43, 0xbf, 0x98, 0x78, 0x3d, 0xb7, 0x09, 0x77, 0x42, 0xe1,
	0x26, 0xe8, 0x4c, 0xcb, 0xce, 0x43, 0xfd, 0x82, 0x04, 0x13, 0x61, 0x82, 0x76, 0xb4, 0x6c, 0x13,
	0x3c, 0x5e, 0x7b, 0x65, 0xfe, 0x1c, 0x5c, 0x75, 0xf1, 0xaf, 0xc2, 0xe9, 0xe7, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x41, 0x97, 0x7e, 0x13, 0x39, 0x08, 0x00, 0x00,
}
